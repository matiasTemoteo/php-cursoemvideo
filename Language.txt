Language PHP

 To use PHP, the first way, it is create PHP template code inside HTML files.
 It is possible adding the code: '<?php >'. This tag is named
 as 'Super Tag PHP'.

 Other ways to declare PHP code:

  - '<? ?>': Short open tag (requires configuration).

  - '<% %>': ASP tag (requires configuration / deprecated).

  - '<?="..."?>': Short tag PHP (used when there is only one command echo or print).


Printing data in HTML

  - To print data, we can use 'echo' or 'print'. Both
    ways are valid and functional.

    Example:

      - 'echo "Hello World!";' - Print 'Hello World'.
      - 'print "Hellow World";' - Print 'Hello World'.


Show server information

  - To show data/information about PHP and current server,
    just use 'phpinfo()' function.

    Example:

      - 'phpinfo();' - Shows php data and server data, like:
         version, Os, architecture and environment.


Using Date

  - The function 'date()' will return the date information.
    It is possible configure the type of date required with
    parameters for the function.
    
    Some parameters are the date format, day mounth and year  type like 'd/m/y' or 'D/M/Y'.

    Other parameters are the time format, hour, minute and
    second like 'G:i:s' or 'H:i:s'.

    Example:

      - date("D/M/Y"): Return the date following the format:
        'Week day / Mounth name / Year number' - Tue/Jul/2025.

      - date("d/m/y"): Return the date following the format:
        'Day number / mounth number / year two char' - 29/07/25.

      - date('G:i:s): Returns the time following the format:
        'hour : minute : second'.


  - It is possible to configure the time zone to be used by
    date function in server, using the function:
    'date_default_timezone_set()'.

    Example:

      - date_default_timezone_set("America/Sao_Paulo"): 
      Define the time zone as São Paulo time.


Variables and Constants

  - Variables/constants are spaces in the memory that can be
    reserved and named by a programming language. These spaces
    once reserved will be available inside the program and can
    be retrieved at any moment (considering scope).

  - Variables are spaces that after reserved, can also be
    modified.

    They are declared using '$' followed by the name to be
    used for the variable.

    Example:

      - '$name = "Gustavo";': Variable reserved as 'name' with
         initial value 'gustavo';

      - '$name = "Alberto";': The variable was modified, receiving
         the value 'Alberto'.

    Rules for variable names:

    - Always start with '$'.
    - The second char must be a letter or '_'.
    - From third and so on, accepts alphanumeric chars.
    - Accepts any char from ASCII after the 128 one.
    - Accepts chars as Ascentuation.
    - It is case sensitive.
    - Reserved names as '$this' are not allowed.


  - Constants are spaces that after reserved, will not be
    modified.

    They are declared using 'const' and will not have '$'
    before the name as works in the variables.

    Example:

      - 'const COUNTRY = "Brazil";': Constant reserved as
        'COUNTRY' with value 'Brazil'.


    Rules for constants names:

     - Accepts alphanumeric chars from the start to end.
     - Accepts any char from ASCII after the 128 one.
     - Accepts chars as Ascentuation.
     - It is case sensitive.


  * Tips for when namming variables/constants

    - Use clear and easy identificators.
    - Avoid use extreme short or extreme long names.
    - Define and apply a pattern for namming in all project files and modules.
    - For variables, prefer using lowercase letters.
    - For constants, prefer using uppercase letters.
    - For functions and atributes, using camelcase.
    - Use snake_case for constant namming.

    
Primitive Types

  PHP is a weak typed language, where there is not absolute
  typing for variables or constants and variables can be
  modified in value and in type.

  There three primitive types classes:

    - escalable
    - Composed
    - Special

  Escalable types:

    - String: Characters String (alphanumeric, symbols, ASCII, etc).
      Ex: "test1", "Alberto", "12345", "false".

    - Integer: Numeric interger value.
      Ex: 1, 15, 1589, 0x4A, -48.

      * '0x' - Hexadecimal values
        '0b' - Binary values
        '0' - Octal values

    - Float, Double, Real: Numeric real value.
      * Real is now deprecated
      Ex: 4.8, 179.47, 5e2, 750.01, -3.5.

    - Boolean: Logic values (true or false).
      Ex: true, false.

  Composed types:

    - Array: List of values, enumerated by indexes, declared
      using "[]".

    - Object: Instance of a class, with internal atributes and
      methods.


  It is possible force some value to be converted to another
  one, using cast statement. The cats statemet is typed as
  the type of conversion inside "()" before the value or
  variable to be casted/converted.

  Example:

    - '$value = (int) "100";': Convert the "100" to integer.

  There is a function in PHP used to show the variable type.
  The function 'var_dump()'.

  Example:

    - '$num = 50;': Declare a variable '$num' with value 50.

    - 'var_dump($num)': Shows a message about type and value of the variable '$num' as following: 'int(50)'.


Operators

  - '=': Used to atribute the followed value to a variables or
    constants.

  - '.': Used to concatenate two different strings (single quoted or
       double quoted).


Strings

  - 'double quoted': Strings envolved in (""). In this type
     of string, exists the interpretation of the content.

     The interpretation can perform the interpolaion of
     variables, replacing the variable name by its
     respective value.
     
     The interolation only works with variables, for
     constants and funtions it ot works. To do the
     concatenation, it is necessary to use the
     operator '.' instead.

     Example: 

       - 'PHP \u{1F418}' - String double quoted, when the
          unicode will be interpretated and replaced by the
          respective emoji.

       - '$name = "Alberto";' - Declara variável $name
          'echo "O nome é $name";' - String interpreta a
          variável e substitui pelo respectivo valor,
          resultando em: 'O nome é Alberto'.


  - 'single quoted': Strings envolved in (''). There is no
     interpretation of the content, so it will be showed
     exactly as writen inside.

     Example:

       - 'PHP \u{1F418}' - String single quoted, the unicode
         will not be interpretated. Resulting in:
         'PHP \u{1F418}'.

       - '$name = "Alberto";' - Declarate the variable $name.
          'echo "The name is $name"' - String not interprets
          the variable and just maintain the text exactly as
          it was writen resulting in: 'The name is $name'.


  - 'Heredoc': Strings with multiple lines as a text block,
    used in textareas or text blocks, it not works inside
    HTML. These type of string is not so much used compared
    to the first types.

    To generate a Heredoc string just use "echo" followed by
    thre minor then signals: '<<<' and a key word to mark
    the start and end of the text block.

    The heredoc can do interpretation and iternpolation
    as the double quoted strings.

    Example:

      - 'echo <<< TEXT 
      
        Testing heredoc strings...
                        Testing heredoc strings...
      
      TEXT;': It will generate the string exactly as writen
      inside the block. In this case the key word is 'TEXT'.
      It interprets and do interpolation with variables,
      unicodes and space sequences.


  - 'Nowdoc': Works similary to th Heredoc strings, but
    when declaring the string, the key word must be in
    single quotes ('').

    The nowdoc not interprets and don't do interpolation,
    as the single quote strings.

    Example:

      - 'echo <<< 'TEXT'
      
        Testing heredoc strings...
                        Testing heredoc strings...
      
      TEXT;': It will generate the string exactly as writen
      inside the block. In this case the key word is 'TEXT'.
      But it will not interpret variables or unicodes.


  Scape Sequence

      - Used to inform to interpreter that the next char
        must not be interpreted or must be interpreted
        as a predefined value. It works mainly inside
        double quoted strings, but for some cases can be
        used inside single qquoted strings.

        Use the character '\' to sinalize a scape sequence.

        Examples:

          - '\"': Add (") as only a quote character and not
            a string delimitation.

          - '\n': Add new line.

          - '\t': Horizontal tabulation.

          - '\\': Scape sequence for a 'inverted bar'.

          - '\$': Currency signal (sinalize that is only a 
            currency signal and not in a variable context).

          - '\u{}': Codepoint unicode.

