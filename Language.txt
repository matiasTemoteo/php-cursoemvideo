Language PHP

 To use PHP, the first way, it is create PHP template code inside HTML files.
 It is possible adding the code: '<?php >'. This tag is named
 as 'Super Tag PHP'.

 Other ways to declare PHP code:

  - '<? ?>': Short open tag (requires configuration).

  - '<% %>': ASP tag (requires configuration / deprecated).

  - '<?="..."?>': Short tag PHP (used when there is only one command echo or print).


Printing data in HTML

  - To print data, we can use 'echo' or 'print'. Both
    ways are valid and functional.

    Example:

      - 'echo "Hello World!";' - Print 'Hello World'.
      - 'print "Hellow World";' - Print 'Hello World'.


Show server information

  - To show data/information about PHP and current server,
    just use 'phpinfo()' function.

    Example:

      - 'phpinfo();' - Shows php data and server data, like:
         version, Os, architecture and environment.


Using Date

  - The function 'date()' will return the date information.
    It is possible configure the type of date required with
    parameters for the function.
    
    Some parameters are the date format, day mounth and year  type like 'd/m/y' or 'D/M/Y'.

    Other parameters are the time format, hour, minute and
    second like 'G:i:s' or 'H:i:s'.

    Example:

      - date("D/M/Y"): Return the date following the format:
        'Week day / Mounth name / Year number' - Tue/Jul/2025.

      - date("d/m/y"): Return the date following the format:
        'Day number / mounth number / year two char' - 29/07/25.

      - date('G:i:s): Returns the time following the format:
        'hour : minute : second'.


  - It is possible to configure the time zone to be used by
    date function in server, using the function:
    'date_default_timezone_set()'.

    Example:

      - date_default_timezone_set("America/Sao_Paulo"): 
      Define the time zone as São Paulo time.


Variables and Constants

  - Variables/constants are spaces in the memory that can be
    reserved and named by a programming language. These spaces
    once reserved will be available inside the program and can
    be retrieved at any moment (considering scope).

  - Variables are spaces that after reserved, can also be
    modified.

    They are declared using '$' followed by the name to be
    used for the variable.

    Example:

      - '$name = "Gustavo";': Variable reserved as 'name' with
         initial value 'gustavo';

      - '$name = "Alberto";': The variable was modified, receiving
         the value 'Alberto'.

    Rules for variable names:

    - Always start with '$'.
    - The second char must be a letter or '_'.
    - From third and so on, accepts alphanumeric chars.
    - Accepts any char from ASCII after the 128 one.
    - Accepts chars as Ascentuation.
    - It is case sensitive.
    - Reserved names as '$this' are not allowed.


  - Constants are spaces that after reserved, will not be
    modified.

    They are declared using 'const' and will not have '$'
    before the name as works in the variables.

    Example:

      - 'const COUNTRY = "Brazil";': Constant reserved as
        'COUNTRY' with value 'Brazil'.


    Rules for constants names:

     - Accepts alphanumeric chars from the start to end.
     - Accepts any char from ASCII after the 128 one.
     - Accepts chars as Ascentuation.
     - It is case sensitive.


  * Tips for when namming variables/constants

    - Use clear and easy identificators.
    - Avoid use extreme short or extreme long names.
    - Define and apply a pattern for namming in all project files and modules.
    - For variables, prefer using lowercase letters.
    - For constants, prefer using uppercase letters.
    - For functions and atributes, using camelcase.
    - Use snake_case for constant namming.

    
Primitive Types

  PHP is a weak typed language, where there is not absolute
  typing for variables or constants and variables can be
  modified in value and in type.

  There three primitive types classes:

    - escalable
    - Composed
    - Special

  Escalable types:

    - String: Characters String (alphanumeric, symbols, ASCII, etc).
      Ex: "test1", "Alberto", "12345", "false".

    - Integer: Numeric interger value.
      Ex: 1, 15, 1589, 0x4A, -48.

      * '0x' - Hexadecimal values
        '0b' - Binary values
        '0' - Octal values

    - Float, Double, Real: Numeric real value.
      * Real is now deprecated
      Ex: 4.8, 179.47, 5e2, 750.01, -3.5.

    - Boolean: Logic values (true or false).
      Ex: true, false.

  Composed types:

    - Array: List of values, enumerated by indexes, declared
      using "[]".

    - Object: Instance of a class, with internal atributes and
      methods.


  It is possible force some value to be converted to another
  one, using cast statement. The cats statemet is typed as
  the type of conversion inside "()" before the value or
  variable to be casted/converted.

  Example:

    - '$value = (int) "100";': Convert the "100" to integer.

  There is a function in PHP used to show the variable type.
  The function 'var_dump()'.

  Example:

    - '$num = 50;': Declare a variable '$num' with value 50.

    - 'var_dump($num)': Shows a message about type and value of the variable '$num' as following: 'int(50)'.


Operators

  - '=': Used to atribute the followed value to a variables or
    constants.

  - '.': Used to concatenate two different strings (single quoted or
       double quoted).


Strings

  - 'double quoted': Strings envolved in (""). In this type
     of string, exists the interpretation of the content.

     The interpretation can perform the interpolaion of
     variables, replacing the variable name by its
     respective value.
     
     The interolation only works with variables, for
     constants and funtions it ot works. To do the
     concatenation, it is necessary to use the
     operator '.' instead.

     Example: 

       - 'PHP \u{1F418}' - String double quoted, when the
          unicode will be interpretated and replaced by the
          respective emoji.

       - '$name = "Alberto";' - Declara variável $name
          'echo "O nome é $name";' - String interpreta a
          variável e substitui pelo respectivo valor,
          resultando em: 'O nome é Alberto'.


  - 'single quoted': Strings envolved in (''). There is no
     interpretation of the content, so it will be showed
     exactly as writen inside.

     Example:

       - 'PHP \u{1F418}' - String single quoted, the unicode
         will not be interpretated. Resulting in:
         'PHP \u{1F418}'.

       - '$name = "Alberto";' - Declarate the variable $name.
          'echo "The name is $name"' - String not interprets
          the variable and just maintain the text exactly as
          it was writen resulting in: 'The name is $name'.


  - 'Heredoc': Strings with multiple lines as a text block,
    used in textareas or text blocks, it not works inside
    HTML. These type of string is not so much used compared
    to the first types.

    To generate a Heredoc string just use "echo" followed by
    thre minor then signals: '<<<' and a key word to mark
    the start and end of the text block.

    The heredoc can do interpretation and iternpolation
    as the double quoted strings.

    Example:

      - 'echo <<< TEXT 
      
        Testing heredoc strings...
                        Testing heredoc strings...
      
      TEXT;': It will generate the string exactly as writen
      inside the block. In this case the key word is 'TEXT'.
      It interprets and do interpolation with variables,
      unicodes and space sequences.


  - 'Nowdoc': Works similary to th Heredoc strings, but
    when declaring the string, the key word must be in
    single quotes ('').

    The nowdoc not interprets and don't do interpolation,
    as the single quote strings.

    Example:

      - 'echo <<< 'TEXT'
      
        Testing heredoc strings...
                        Testing heredoc strings...
      
      TEXT;': It will generate the string exactly as writen
      inside the block. In this case the key word is 'TEXT'.
      But it will not interpret variables or unicodes.


  Scape Sequence

      - Used to inform to interpreter that the next char
        must not be interpreted or must be interpreted
        as a predefined value. It works mainly inside
        double quoted strings, but for some cases can be
        used inside single qquoted strings.

        Use the character '\' to sinalize a scape sequence.

        Examples:

          - '\"': Add (") as only a quote character and not
            a string delimitation.

          - '\n': Add new line.

          - '\t': Horizontal tabulation.

          - '\\': Scape sequence for a 'inverted bar'.

          - '\$': Currency signal (sinalize that is only a 
            currency signal and not in a variable context).

          - '\u{}': Codepoint unicode.


Forms

 HTML forms are one of the most important and most used
 elements in PHP applications. There is the main way of
 how a user can interact with the application.

 When configured, the forms can send the entered data
 to the server using a send method and a send action
 atribute.

 To configure a form in HTML to send data to PHP server, it
 is necessary the following:

   - Form method: GET or POST.

   - Form action: PHP file in server that will receive
     and handle the data from form.

   - Form input atributes: Add the atributes 'name' and in
     some cases, the atribute 'value'. The 'name' is the
     string data the PHP will use to identify and access
     the received data.

 In PHP file, it is possible retrieve the Form sent data
 by the Super Global variables: 

    - '$_GET': Retrieve the data sent using Get method.

    - '$_POST': Retrieve the data sent using Post method.

    - '$_COOKIES': Retrieve the cookies data, when sent.

    - '$_REQUEST': Retrieve all the possible data sent
      from the form, including the Get, post and cookies
      data (works as a combination of the other variables).

 The variables above will return the data inside a Array,
 where each input data sent will be in a different index
 of that array. It can be accessed indicating the respective
 index (the name configured in the input element in HTML).

 Example:

   <form action="cad.php" method="get">
      <input type="text" name="value1">
      <input type="text" name="value2">
   </form>

   <?php
      $value1 = $_GET["value1"];
      $value2 = $_GET["value2"];
   ?>

   In the example above, the inputs are configured with
   the names 'value1' and 'value2' respectivelly.

   The php code received the data from the variable '$_GET'.
   It works because the method defined is 'get'.
   The value is accessed indicating the index of the array,
   in the case, repsectivelly, ["value1"] and ["value2"].

   It is possible avoid errors in php code, using a
   operator called 'null coalescence', that is a 
   way to check if some data is null and define a
   default value for when it is null. It is defined
   using double interrogation signal (??).

   Example:

   <?php
      $value1 = $_GET["value1"] ?? "Default value";
      $value2 = $_GET["value2"] ?? "Default value";
   ?>

 Query String

  Url string block with paramters, which ones will be processed
  as GET request in PHP. These parameters can be retrieved using
  the SuperGlobal '$_GET'.


 Self Call Form

  It is possible set the action atribute on form, to self
  call the own PHP file. Just use the name of the file as
  value to the action.
  
  But instead of just put the name in string, it is possible
  use the Global Variable '$_SERVER' requesting the value 
  'PHP_SELF'. And to add the varibale value in the HTML
  property, it is possible use the PHP short tag "<?=?>".

  Example:

    - <form action="<?=$_SERVER["PHP_SELF"]?>">
      </form>



Arithmetic Operators

 Operators used to perform math operations, like sum,
 subtraction, multiply, division, power, square root, etc.

 In PHP, the math operations works even with strings,
 if the string is a valid number.

 If the string is not a valid number, it returns error
 informing of no valid number in string.

 In old versions, php executed sum between numbers found
 inside a string, even the string having more than just
 the number. Ex: "12 test" + "10 test" = 22. But in the
 current versions, it is being validated and not works more.


  - '+': Sum between numbers. 

    Example: 4 + 4 = 8 or "4" + "4" = 8.
    
 
  - '-': Subtraction bwtween numbers.

    Example: 8 - 6 = 2 or 10 - "5" = 5.


  - '*': Multiply bwtween numbers.

    Example: 9 * 5 = 45 or "8" * "2" = 16.


  - '/': Division between numbers.

    Example: 20 / 4 = 5 or "50" / 5 = 10.


  - '%': Integer division rest between numbers (module).

    Example: 10 % 2 = 0 or "8" % 3 = 2.


  - '**': Power between numbers.

    Example: 6 ** 2 = 36 or 4 ** "3" = 64.

    * This operator was added after php version 5.6.
    

  Order of precedence:

    1 - '**' power

    2 - '/' division
      - '%' module
      - '*' multiply

    3 - '+' sum
      - '-' subtraction

    * When more than a operation of same order of precedence
      appears in a expression, the order of execution is
      done from left to right in order of appearence.

    * There is possible use parenthesis in math expressions
      to envolve expressions and change order of precedence.

      Example: 16 / ( 5 + 3) * 2 = 16.

      In this case the expression '5 + 3' was executed first
      than the others because it was inside parenthesis.


Math functions

  - 'abs()': Return the absolute value of a number or
    expression. 

    Example: abs(10) = 10 or abs(-10) = 10.


  - 'base_convert()': convert the informed number to
    another numeric base like decimal, hexadecimal,
    octal, binary, etc. The funtion receive some
    parameters: the number to be converted, the current
    numeric base of the number, and the numeric base
    expected to be converted as result.

    Example: base_convert(254, 10, 8) = 376.

    * In this example, ht enumber '254' is being
      converted from base '10' to octal (base '8').


  - 'ceil()': Round the number to the ceil.

    Example: ceil(10.6) = 11.


  - 'floor()': Round the number to the floor.

    Example: floor(10.6) = 10.


  - 'round()': round the number of the most near
    edge (floor or ceil).

    Examples: round(10.6) = 11 or round(10.4) = 10.


  - 'hypot()': Calculate hypotenusis value base on
    catets values.

    Example: hypot(3, 4) = 5.


  - 'intdiv()': Execute the integer division between
    numbers. Different of operator '%' that only returns
    the division rest, this function returns the division
    result itself.

    Examples: intdiv(5, 2) = 2 or intdiv(15, 6) = 3.


  - 'min()': Returns the minimun value encountered in a
    given argument list.

    Example: min(7, 4, 3, 2, 9, 25) = 2.


  - 'max()': Returns the maximun value encountered in a
    given argument list.

    Example: max(4, 1, 11, 35, 0, 7) = 35.

  
  - 'pi()': Returns the PI constant value.

    Example: pi() = 3.14159265...

    * There is a default constant called 'M_PI' in PHP,
      that also have the PI value saved for consult.

    Example: 'echo M_PI;' = 3.14159265...


  - 'pow()': Returns the result of power between numbers.
     Used mainly in old versions whe there was not
     implemented the oeperator '**'.

     Example: pow(5, 2) = 25.

     * When use this way instead of the operator '**',
     it will lose the order of precedence.


  - 'sin()': Returns the sine of a number in radians.

    Example: sin(60) = -0.3048...


  - 'cos()': Returns the cosine of a number is radians.

    Example: cos(60) = -0.9524...


  - 'tan()': Returns the tangent of a number in radians.

    Example: tan(60) = 0.3200...


  - 'sqrt()': Returns squareroot of a number.

    Example: sqrt(16) = 4.

    * There is no function for cubic root or other roots,
    but it is possible use operator '**' and fraction
    values to perform other root operations.

    Example: 27 ** (1/3) = 3 or 256 ** (1/4) = 4.


  - 'rand()': Generate and returns a randomic number,
    between given minimum and a maximum number.

    Example: rand(0, 50) = 25.
             rand(0, 50) = 36.

    * Used an old algorithm from 1950s called
    'Linear Congrential Generator'.

    * Accepts a minimum number bigger than the maximun
      number (inverted given numbers).

    * It is informed that after PHP v7.0, this function
    calls the newest 'mt_rand()' instead. But it is
    recomended use the 'mt_rand()' directly.


  - 'mt_rand()': Generate and returns a randomic number,
    between given minimum and d maximum numbers.

    Example: mt_rand(15, 78) = 55.
             mt_rand(15, 78) = 70.

    * Uses a more up to date algorithm from 1997, called
    'Mersenne Twister'.

    * Not accesps a minimum number bigger than the maxmim one.


  - 'random_int()': Generate and returns secured encrypted
    numbers using cryptography methods, between given minimum
    and maximum numbers.

    Example: random_int(5, 30) = 17.
             random_int(5, 30) = 9.

    * It is slower than the others ('rand()' and 'mt_rand()')
    because of the cryptographic algorithm.



Number Formatting

  String functions used to format nummeric and currency values.


  - 'number_format()': Format the given number to a specified
    decimal houses count and also defining the decimal
    separator (in us, this is '.' and br it is ',') and also
    the thousand separator (in us it is ',' and in br it is '.').

    Example:

     - number_format(2500, 2, '.', ','); - Returns '2,500.00'.
     - number_format(3650, 2, ',', '.'); - Returns '3.650,00'.


  - 'numfmt_create()': Create a rule pattern for numeric formatting
    to be used in number format function. It requires international
    library enabled for running (maybe not run properly in local machines, even the library is not enabled).

    Example:

     - numfmt_create("pt_BR", NumberFormatter::CURRENCY);

       * Creates a format for Brazilian Currency value.


  - 'numfmt_format_currency()': Format the given currency value to
    the expected format, using a created pattern and a specified
    currency type (BRL, USD, etc).

    Example:

     - $pattern = numfmt_create("pt_BR",NumberFormatter::CURRENCY);

       numfmt_format_currency($pattern, 4856, "BRL");

       * Return the value exactly as this: 'R$ 4.856,00'.


     - $pattern = numfmt_create("en_US",NumberFormatter::CURRENCY);

       numfmt_format_currency($pattern, 4856, "USD");

       * Return the value exactly as this: 'US$ 4,856.00'.


Super Globals

 PHP default variables available in global context (any part of
 the script). These variables are used to retrieve runtime and
 configuration data from current program running session.

 The Super Globals variables name are composed by '$' followed
 by the name of variable (almost all have a '_' between '$'
 and the name).

    - '$_GET': Retrieve the data sent using Get method.

    - '$_POST': Retrieve the data sent using Post method.

    - '$_COOKIES': Retrieve the cookies data, when sent.

    - '$_REQUEST': Retrieve all the possible data sent
      from the form, including the Get, post and cookies
      data (works as a combination of the others above).

    - '$_COOKIE': Retrieve the data from the current cookies
      available in browser. These cookies are normally set by
      own PHP program when called once and after that will
      be available for consume for a while (it expires after
      some time - what is configurable in PHP).

    - '$_SESSION': Retrieve the session data of the currect
      PHP page session, also saved in browser. It is created
      by PHP program when called once and will be available for
      some time (also have a expiration time configurable).

    - '$_ENV': Retrieve all the environment created variables.
      These are variables created in sever to contain important
      values or configurations used in PHP programs (passwords,
      DataBase credentials, API URLs, constant values, etc).

    - '$_SERVER': Retrieve some variables, configurations and
      file names related to the currenct server that is running
      the PHP program (the part of server acessible for the
      PHP, not the all server instances).

    - '$GLOBALS': Retrieve all the data from the other Super
      Globals in the same object. It is slowerd then the others
      because it loads all the data of them once.


Cookie and Session

 Cookies are data objects that cen be saved in clients side
 (browser) to make it fast some process while user is navigating.
 It is used also, to save users preferences and other similar
 data to help improve the user experience while in the website.

 The cookies must not contain sensitive data or other important
 information from own website or user. These data are available
 in the browser and can be acessed by other websites or users.

 It is possible create a cookie variable with the function
 'setcookie()'. It is used in own PHP script.

 Example:

   - setcookie("week-day", "thursday", time() + 3600);

   * In this example, it was created a cookie variable
   called 'week-day', containing the value 'thursday'.
   It was informed the value 'time() + 3600' that is the
   expiration time in seconds, in this case 1 hour.



 Session is a object similar to the cookie, but it is used
 to save the users session, to inform that the current users
 has logged in and is already authenticated in the moment.

 If it was not used sessions, always te user entrers a website,
 it would ask him to log in again, so with the session it is 
 possible maintain some information to comprovate that the
 current user is already logged and this login time still is
 valid.

 Similar to cookies, it will expirate after some time and
 will need to be recreated again.

 It is possible define a new session instance with the funtion
 'session_start()'. It will created these session instance and
 will be available add session variables using the Super Global
 session.

 Example:

   - session_start();
    $_SESSION["test"] = "Working...";

    * In this case the session is being started with the
    function 'sessions_start()' and the variable 'test' is
    being created for the current session.
